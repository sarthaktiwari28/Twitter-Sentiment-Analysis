"""
Assignment 3 - Unit Tests
"""

import unittest
import numpy as np
from tweet import TextPreprocessing


class TestMyModule(unittest.TestCase):
    """
    This class tests the TextPreprocessing class
    """
    def setUp(self):
        return

    def test_clean_text(self):
        """
        Master test function
        """

        tweet = "@skand this (abc) skand@columbia.edu is a random Tweet. don't run 12:"\
        " https://www.google.com⚡️ #columbia"
        processor = TextPreprocessing(2, 1000)
        result = processor.clean_text(tweet)

        expected_result = "(abc) skand@'t run : ⚡️ columbia"

        self.assertEqual(result, expected_result)

    def test_tokenize_text(self):
        """
        Test tokeniser function
        """

        cleaned_tweet = "(abc) skand@'t run : ⚡️ columbia"
        processor = TextPreprocessing(2, 1000)
        result = processor.tokenize_text(cleaned_tweet)

        expected_result = ['(', 'abc', ')', 'skand', '@', "'", 't', 'run', ':', '⚡', '️',\
         'columbia']

        self.assertEqual(result, expected_result)

    @staticmethod
    def test_replace_token_with_index():

        """
        Test replace token with index function
        """

        tokenized = ['(', 'abc', ')', 'skand', '@', "'", 't', 'run', ':', '⚡', '️', 'columbia']
        processor = TextPreprocessing(2, 1000)
        result = processor.replace_token_with_index(tokenized)

        expected_result = [np.array([0.026645, -0.15996, -0.13042, 0.32999, 0.24416, 0.41042,
                                     1.3001, 2.6126, 0.70933, 0.91401, 0.21455, 0.2219,
                                     -2.6304, -0.11566, -0.32597, -2.167, -1.0084, 0.43317,
                                     -0.85766, -0.20587, -0.037961, -1.5767, 0.15105, 0.24585,
                                     1.1149], dtype='float32'),
                           np.array([3.4127e-01, -4.3348e-01, -3.5918e-01, -1.5297e-01, -7.8167e-02,
                                     6.4745e-02, 1.3919e+00, 2.2717e+00, 5.3841e-01, 1.2455e+00,
                                     6.5984e-01, 5.4900e-01, -2.6548e+00, 8.2321e-04, -3.8957e-01,
                                     -1.9520e+00, -1.1767e+00, 2.0340e-01, -9.1539e-01, 9.0370e-02,
                                     1.6488e-01, -1.8562e+00, 1.3423e-01, 5.7839e-01, 1.0740e+00],
                                    dtype='float32'),
                           np.array([-0.91012, -0.216, 0.55683, -0.55125, -0.088005,
                                     0.11302, 0.90393, 1.2515, 0.4989, 0.23189,
                                     -0.35661, -0.31751, -2.9269, -0.21685, -0.33888,
                                     -1.8477, 0.0029851, -0.14393, -1.1331, 0.19579,
                                     -0.25747, -1.5152, 0.03744, -0.46161, 1.1892],
                                    dtype='float32'),
                           np.array([0.44205, -0.67697, -0.079938, 0.89579, -0.043245, 0.35863,
                                     0.51735, 1.433, -0.21658, 0.93923, 0.36207, -0.27295,
                                     -3.4128, 0.46583, -0.87769, -0.42464, -1.3648, 0.43996,
                                     -2.4477, -0.23733, 0.42426, 0.18637, -0.19753, 0.26109,
                                     0.44809], dtype='float32'),
                           np.array([0.78637, 0.14593, -1.2834, -0.082192, -0.62889, 0.52688,
                                     -0.18855, 2.007, -0.18195, -0.029286, -0.59935, -0.35501,
                                     -3.772, 0.38563, -0.67084, 0.30003, -0.65916, 0.21904,
                                     -1.6913, 1.4055, 0.090167, -0.94622, 0.58861, 0.58052,
                                     0.047455], dtype='float32'),
                           np.array([-3.4565e-02, 4.9429e-01, 1.7151e-01, -2.1078e-01, -3.2324e-01,
                                     4.5813e-01, 1.1507e+00, -3.2018e-01, 3.1753e-01, 1.2728e-01,
                                     1.1227e-02, 1.6632e-01, -4.0517e+00, 2.7311e-01, 3.4912e-01,
                                     -3.2721e-02, 2.6152e-03, -8.1856e-01, -2.4261e-01, -6.9464e-01,
                                     -3.0307e-01, 2.9754e-01, 1.2442e+00, -1.5908e-01, 4.6119e-01],
                                    dtype='float32'),
                           np.array([1.1242, 0.054519, -0.037362, 0.10046, 0.11923, -0.30009,
                                     1.0938, 2.537, -0.072802, 1.0491, 1.0931, 0.066084,
                                     -2.7036, -0.14391, -0.22031, -0.99347, -0.65072, -0.030948,
                                     -1.0817, -0.64701, 0.32341, -0.41612, -0.5268, -0.047166,
                                     0.71549], dtype='float32')]

        np.testing.assert_array_equal(result, expected_result)

    @staticmethod
    def test_pad_sequence1():

        """
        Test pad sequence condition 1 function
        """

        word_embeddings = [np.array([0.026645, -0.15996, -0.13042, 0.32999, 0.24416, 0.41042,
                                     1.3001, 2.6126, 0.70933, 0.91401, 0.21455, 0.2219,
                                     -2.6304, -0.11566, -0.32597, -2.167, -1.0084, 0.43317,
                                     -0.85766, -0.20587, -0.037961, -1.5767, 0.15105, 0.24585,
                                     1.1149], dtype='float32'),
                           np.array([3.4127e-01, -4.3348e-01, -3.5918e-01, -1.5297e-01, -7.8167e-02,
                                     6.4745e-02, 1.3919e+00, 2.2717e+00, 5.3841e-01, 1.2455e+00,
                                     6.5984e-01, 5.4900e-01, -2.6548e+00, 8.2321e-04, -3.8957e-01,
                                     -1.9520e+00, -1.1767e+00, 2.0340e-01, -9.1539e-01, 9.0370e-02,
                                     1.6488e-01, -1.8562e+00, 1.3423e-01, 5.7839e-01, 1.0740e+00],
                                    dtype='float32'),
                           np.array([-0.91012, -0.216, 0.55683, -0.55125, -0.088005,
                                     0.11302, 0.90393, 1.2515, 0.4989, 0.23189,
                                     -0.35661, -0.31751, -2.9269, -0.21685, -0.33888,
                                     -1.8477, 0.0029851, -0.14393, -1.1331, 0.19579,
                                     -0.25747, -1.5152, 0.03744, -0.46161, 1.1892],
                                    dtype='float32'),
                           np.array([0.44205, -0.67697, -0.079938, 0.89579, -0.043245, 0.35863,
                                     0.51735, 1.433, -0.21658, 0.93923, 0.36207, -0.27295,
                                     -3.4128, 0.46583, -0.87769, -0.42464, -1.3648, 0.43996,
                                     -2.4477, -0.23733, 0.42426, 0.18637, -0.19753, 0.26109,
                                     0.44809], dtype='float32'),
                           np.array([0.78637, 0.14593, -1.2834, -0.082192, -0.62889, 0.52688,
                                     -0.18855, 2.007, -0.18195, -0.029286, -0.59935, -0.35501,
                                     -3.772, 0.38563, -0.67084, 0.30003, -0.65916, 0.21904,
                                     -1.6913, 1.4055, 0.090167, -0.94622, 0.58861, 0.58052,
                                     0.047455], dtype='float32'),
                           np.array([-3.4565e-02, 4.9429e-01, 1.7151e-01, -2.1078e-01, -3.2324e-01,
                                     4.5813e-01, 1.1507e+00, -3.2018e-01, 3.1753e-01, 1.2728e-01,
                                     1.1227e-02, 1.6632e-01, -4.0517e+00, 2.7311e-01, 3.4912e-01,
                                     -3.2721e-02, 2.6152e-03, -8.1856e-01, -2.4261e-01, -6.9464e-01,
                                     -3.0307e-01, 2.9754e-01, 1.2442e+00, -1.5908e-01, 4.6119e-01],
                                    dtype='float32'),
                           np.array([1.1242, 0.054519, -0.037362, 0.10046, 0.11923, -0.30009,
                                     1.0938, 2.537, -0.072802, 1.0491, 1.0931, 0.066084,
                                     -2.7036, -0.14391, -0.22031, -0.99347, -0.65072, -0.030948,
                                     -1.0817, -0.64701, 0.32341, -0.41612, -0.5268, -0.047166,
                                     0.71549], dtype='float32')]
        processor = TextPreprocessing(2, 1000)
        result = processor.pad_sequence(word_embeddings)

        expected_result = [np.array([0.026645, -0.15996, -0.13042, 0.32999, 0.24416, 0.41042,
                                     1.3001, 2.6126, 0.70933, 0.91401, 0.21455, 0.2219,
                                     -2.6304, -0.11566, -0.32597, -2.167, -1.0084, 0.43317,
                                     -0.85766, -0.20587, -0.037961, -1.5767, 0.15105, 0.24585,
                                     1.1149], dtype='float32'),
                           np.array([3.4127e-01, -4.3348e-01, -3.5918e-01, -1.5297e-01, -7.8167e-02,
                                     6.4745e-02, 1.3919e+00, 2.2717e+00, 5.3841e-01, 1.2455e+00,
                                     6.5984e-01, 5.4900e-01, -2.6548e+00, 8.2321e-04, -3.8957e-01,
                                     -1.9520e+00, -1.1767e+00, 2.0340e-01, -9.1539e-01, 9.0370e-02,
                                     1.6488e-01, -1.8562e+00, 1.3423e-01, 5.7839e-01, 1.0740e+00],
                                    dtype='float32')]

        np.testing.assert_array_equal(result, expected_result)

    @staticmethod
    def test_pad_sequence2():

        """
        Test pad sequence condition 2 function
        """

        word_embeddings = [np.array([0.026645, -0.15996, -0.13042, 0.32999, 0.24416, 0.41042,
                                     1.3001, 2.6126, 0.70933, 0.91401, 0.21455, 0.2219,
                                     -2.6304, -0.11566, -0.32597, -2.167, -1.0084, 0.43317,
                                     -0.85766, -0.20587, -0.037961, -1.5767, 0.15105, 0.24585,
                                     1.1149], dtype='float32'),
                           np.array([3.4127e-01, -4.3348e-01, -3.5918e-01, -1.5297e-01, -7.8167e-02,
                                     6.4745e-02, 1.3919e+00, 2.2717e+00, 5.3841e-01, 1.2455e+00,
                                     6.5984e-01, 5.4900e-01, -2.6548e+00, 8.2321e-04, -3.8957e-01,
                                     -1.9520e+00, -1.1767e+00, 2.0340e-01, -9.1539e-01, 9.0370e-02,
                                     1.6488e-01, -1.8562e+00, 1.3423e-01, 5.7839e-01, 1.0740e+00],
                                    dtype='float32'),
                           np.array([-0.91012, -0.216, 0.55683, -0.55125, -0.088005,
                                     0.11302, 0.90393, 1.2515, 0.4989, 0.23189,
                                     -0.35661, -0.31751, -2.9269, -0.21685, -0.33888,
                                     -1.8477, 0.0029851, -0.14393, -1.1331, 0.19579,
                                     -0.25747, -1.5152, 0.03744, -0.46161, 1.1892],
                                    dtype='float32'),
                           np.array([0.44205, -0.67697, -0.079938, 0.89579, -0.043245, 0.35863,
                                     0.51735, 1.433, -0.21658, 0.93923, 0.36207, -0.27295,
                                     -3.4128, 0.46583, -0.87769, -0.42464, -1.3648, 0.43996,
                                     -2.4477, -0.23733, 0.42426, 0.18637, -0.19753, 0.26109,
                                     0.44809], dtype='float32'),
                           np.array([0.78637, 0.14593, -1.2834, -0.082192, -0.62889, 0.52688,
                                     -0.18855, 2.007, -0.18195, -0.029286, -0.59935, -0.35501,
                                     -3.772, 0.38563, -0.67084, 0.30003, -0.65916, 0.21904,
                                     -1.6913, 1.4055, 0.090167, -0.94622, 0.58861, 0.58052,
                                     0.047455], dtype='float32'),
                           np.array([-3.4565e-02, 4.9429e-01, 1.7151e-01, -2.1078e-01, -3.2324e-01,
                                     4.5813e-01, 1.1507e+00, -3.2018e-01, 3.1753e-01, 1.2728e-01,
                                     1.1227e-02, 1.6632e-01, -4.0517e+00, 2.7311e-01, 3.4912e-01,
                                     -3.2721e-02, 2.6152e-03, -8.1856e-01, -2.4261e-01, -6.9464e-01,
                                     -3.0307e-01, 2.9754e-01, 1.2442e+00, -1.5908e-01, 4.6119e-01],
                                    dtype='float32'),
                           np.array([1.1242, 0.054519, -0.037362, 0.10046, 0.11923, -0.30009,
                                     1.0938, 2.537, -0.072802, 1.0491, 1.0931, 0.066084,
                                     -2.7036, -0.14391, -0.22031, -0.99347, -0.65072, -0.030948,
                                     -1.0817, -0.64701, 0.32341, -0.41612, -0.5268, -0.047166,
                                     0.71549], dtype='float32')]
        processor = TextPreprocessing(10, 1000)
        result = processor.pad_sequence(word_embeddings)

        expected_result = [np.array([0.026645, -0.15996, -0.13042, 0.32999, 0.24416, 0.41042,
                                     1.3001, 2.6126, 0.70933, 0.91401, 0.21455, 0.2219,
                                     -2.6304, -0.11566, -0.32597, -2.167, -1.0084, 0.43317,
                                     -0.85766, -0.20587, -0.037961, -1.5767, 0.15105, 0.24585,
                                     1.1149], dtype='float32'),
                           np.array([3.4127e-01, -4.3348e-01, -3.5918e-01, -1.5297e-01, -7.8167e-02,
                                     6.4745e-02, 1.3919e+00, 2.2717e+00, 5.3841e-01, 1.2455e+00,
                                     6.5984e-01, 5.4900e-01, -2.6548e+00, 8.2321e-04, -3.8957e-01,
                                     -1.9520e+00, -1.1767e+00, 2.0340e-01, -9.1539e-01, 9.0370e-02,
                                     1.6488e-01, -1.8562e+00, 1.3423e-01, 5.7839e-01, 1.0740e+00],
                                    dtype='float32'),
                           np.array([-0.91012, -0.216, 0.55683, -0.55125, -0.088005,
                                     0.11302, 0.90393, 1.2515, 0.4989, 0.23189,
                                     -0.35661, -0.31751, -2.9269, -0.21685, -0.33888,
                                     -1.8477, 0.0029851, -0.14393, -1.1331, 0.19579,
                                     -0.25747, -1.5152, 0.03744, -0.46161, 1.1892],
                                    dtype='float32'),
                           np.array([0.44205, -0.67697, -0.079938, 0.89579, -0.043245, 0.35863,
                                     0.51735, 1.433, -0.21658, 0.93923, 0.36207, -0.27295,
                                     -3.4128, 0.46583, -0.87769, -0.42464, -1.3648, 0.43996,
                                     -2.4477, -0.23733, 0.42426, 0.18637, -0.19753, 0.26109,
                                     0.44809], dtype='float32'),
                           np.array([0.78637, 0.14593, -1.2834, -0.082192, -0.62889, 0.52688,
                                     -0.18855, 2.007, -0.18195, -0.029286, -0.59935, -0.35501,
                                     -3.772, 0.38563, -0.67084, 0.30003, -0.65916, 0.21904,
                                     -1.6913, 1.4055, 0.090167, -0.94622, 0.58861, 0.58052,
                                     0.047455], dtype='float32'),
                           np.array([-3.4565e-02, 4.9429e-01, 1.7151e-01, -2.1078e-01, -3.2324e-01,
                                     4.5813e-01, 1.1507e+00, -3.2018e-01, 3.1753e-01, 1.2728e-01,
                                     1.1227e-02, 1.6632e-01, -4.0517e+00, 2.7311e-01, 3.4912e-01,
                                     -3.2721e-02, 2.6152e-03, -8.1856e-01, -2.4261e-01, -6.9464e-01,
                                     -3.0307e-01, 2.9754e-01, 1.2442e+00, -1.5908e-01, 4.6119e-01],
                                    dtype='float32'),
                           np.array([1.1242, 0.054519, -0.037362, 0.10046, 0.11923, -0.30009,
                                     1.0938, 2.537, -0.072802, 1.0491, 1.0931, 0.066084,
                                     -2.7036, -0.14391, -0.22031, -0.99347, -0.65072, -0.030948,
                                     -1.0817, -0.64701, 0.32341, -0.41612, -0.5268, -0.047166,
                                     0.71549], dtype='float32'),
                           np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='float32'),
                           np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='float32'),
                           np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='float32')]

        np.testing.assert_array_equal(result, expected_result)

    @staticmethod
    def test_process_tweet():

        """
        Test pipeline function
        """

        tweet = "@skand this (abc) skand@columbia.edu is a random Tweet. don't run 12:"\
        " https://www.google.com⚡️ #columbia"
        processor = TextPreprocessing(2, 1000)
        result = processor.process_tweet(tweet)
        expected_result = [np.array([0.026645, -0.15996, -0.13042, 0.32999, 0.24416, 0.41042,
                                     1.3001, 2.6126, 0.70933, 0.91401, 0.21455, 0.2219,
                                     -2.6304, -0.11566, -0.32597, -2.167, -1.0084, 0.43317,
                                     -0.85766, -0.20587, -0.037961, -1.5767, 0.15105, 0.24585,
                                     1.1149], dtype='float32'),
                           np.array([3.4127e-01, -4.3348e-01, -3.5918e-01, -1.5297e-01, -7.8167e-02,
                                     6.4745e-02, 1.3919e+00, 2.2717e+00, 5.3841e-01, 1.2455e+00,
                                     6.5984e-01, 5.4900e-01, -2.6548e+00, 8.2321e-04, -3.8957e-01,
                                     -1.9520e+00, -1.1767e+00, 2.0340e-01, -9.1539e-01, 9.0370e-02,
                                     1.6488e-01, -1.8562e+00, 1.3423e-01, 5.7839e-01, 1.0740e+00],
                                    dtype='float32')]
        np.testing.assert_array_equal(result, expected_result)